#  Black       0;30     Dark Gray     1;30
#  Blue        0;34     Light Blue    1;34
#  Green       0;32     Light Green   1;32
#  Cyan        0;36     Light Cyan    1;36
#  Red         0;31     Light Red     1;31
#  Purple      0;35     Light Purple  1;35
#  Brown       0;33     Yellow        1;33
#  Light Gray  0;37     White         1;37

red='\e[0;31m'
RED='\e[1;31m'
blue='\e[0;34m'
BLUE='\e[1;34m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
green='\e[0;32m'
GREEN='\e[1;32m'
purple='\e[0;35m'
PURPLE='\e[1;35m'
yellow='\e[0;33m'
YELLOW='\e[1;33m'
NC='\e[0m' #no color

#---------------
# Shell Prompt
#---------------

if [[ "${DISPLAY#$HOST}" != ":0.0" &&  "${DISPLAY}" != ":0" ]]; then  
    HILIT=${red}   # remote machine: prompt will be partly red
else
    HILIT=${cyan}  # local machine: prompt will be partly cyan
fi

function set_xtitle()
{
    if [ $TERM == "xterm" ]; then
#        echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"
#        echo -ne "\033]0;${HOSTNAME}(${USER}): ${PWD}\007"
        if [ ${USER} == "rvkx64" ]; then
            echo -ne "\033]0;${HOSTNAME:0:10} | ${CLEARCASE_ROOT##*/} | ${PWD}\007"
        else
            echo -ne "\033]0;${USER} | ${HOSTNAME} | ${CLEARCASE_ROOT##*/} | ${PWD}\007"
        fi
    fi
}

#PS1 function
function host_load()
{
    THRESHOLD_LOAD=50
    COLOUR_LOW=$green
    COLOUR_HIGH=$red

    if [ $OS = "Linux" ]; then
        ONE=$(uptime | sed -e "s/.*load average: \(.*\...\),\(.*\...\),\(.*\...\)/\1/" -e "s/ //g")
    fi
    if [ $OS = "Darwin" ]; then
        ONE=$(uptime | sed -e "s/.*load averages: \(.*\...\)\(.*\...\)\(.*\...\)/\1/" -e "s/ //g")
    fi
    ONEHUNDRED=$(echo -e "scale=0 \n $ONE/0.01 \nquit \n" | bc)
    if [ $ONEHUNDRED -gt $THRESHOLD_LOAD ]
        then
            HOST_COLOR=$COLOUR_HIGH
        else
            HOST_COLOR=$COLOUR_LOW 
    fi
}

function power_prompt()
{
    host_load
    set_xtitle
    if [ "$UID" -eq 0 ]; then
        #PS1="\[${HOST_COLOR}\]\t\[${NC}\] \[${blue}\]$(parse_git_branch)\[${NC}\] \[${purple}\]\w\[${NC}\]> "
        PS1="\[${HOST_COLOR}\]\t\[${NC}\] \[${blue}\]$(parse_git_branch)\[${NC}\] \[${purple}\]\w\[${NC}\]> "
    else
        #PS1="\[${HOST_COLOR}\]\t\[${NC}\] \[${blue}\]$(parse_git_branch)\[${NC}\] \[${yellow}\]\w\[${NC}\]> "
        PS1="\[${HOST_COLOR}\]\t\[${NC}\] \[${blue}\]$(parse_git_branch)\[${NC}\] \[${yellow}\]\w\[${NC}\]> "
    fi
}

if [ $PROMPT = "power" ]; then
    PROMPT_COMMAND=power_prompt
else
    if [ "$UID" -eq 0 ]; then
        PS1="[\t][\[${red}\]\u@\h:\w]\$\[${NC}\] "
    else
        PS1="[\t][\[${cyan}\]\u\[${NC}\]@\[${red}\]\h\[${NC}\]:\w]\$ "
    fi
fi


# X DISPLAY settings
if [ $OS = "Linux" ]; then
   function get_xserver ()
   {
       case $TERM in
           xterm | xterm-color | linux )
               XSERVER=$(who am i | awk '{print $NF}' | tr -d ')''(' )
               XSERVER=${XSERVER%%:*}
               ;;
       esac
   }
   if [ -z ${DISPLAY:=""} ]; then
       get_xserver
       if [[ -z ${XSERVER}  || ${XSERVER} == $(hostname) || ${XSERVER} == "unix" ]]; then
           export DISPLAY=":0.0"
       else
          export DISPLAY=${XSERVER}:0.0
       fi
   fi
elif [ $OS = 'Darwin' ]; then
   if [[ -z $DISPLAY ]]; then
       disp_no=($( ps -ax | grep X11.app | grep -v grep | awk '{print $9}' ))
       if [[ -n $disp_no ]];then
           export DISPLAY=${disp_no}.0
       else
           export DISPLAY=''
           echo "No running X-Server"
       fi
   fi
fi
if [[ ! -z $DISPLAY ]]; then
    if [ $NEVER_USE_X != 'Y' ]; then
        USE_X="Y"
        echo "Using X"
    else
        echo "usage of X prohibited"
    fi
    if [ $SHLVL = 1 ]; then
        rm -f $HOME/.display
        echo $DISPLAY > $HOME/.display
        echo "DISPLAY has been set to $DISPLAY"
    elif [ $SHLVL -gt 1 ]; then
        if [ -e $HOME/.display ]; then
            DISPLAY_FIX=$(cat $HOME/.display)
            if [ $DISPLAY != $DISPLAY_FIX ]; then
#                export DISPLAY=$DISPLAY_FIX
                echo "screen/DISPLAY mismatch detected.  DISPLAY has been adjusted to $DISPLAY"
            fi
        fi
    fi
else
    USE_X="N"
    echo "Not using X"
fi
if [ $NEVER_USE_X = "Y" ]; then
    USE_X="N"
fi

